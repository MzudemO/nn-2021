from torch._C import device
from models.vae import AutoEncoder


def mnist(tasks, image_size):
    args = {
        "depth": 0,
        "conv_gated": False,
        "device": device(type="cpu"),
        "h_dim": 400,
        "dg_gates": True,
        "conv_type": "standard",
        "hidden": False,
        "classifier": True,
        "network_output": "sigmoid",
        "fc_gated": False,
        "deconv_type": "standard",
        "classify_opt": "beforeZ",
        "fc_nl": "relu",
        "classes": 10,
        "lamda_vl": 1.0,
        "fc_drop": 0.0,
        "z_dim": 100,
        "dg_prop": 0.8,
        "reducing_layers": 3,
        "lamda_rcl": 1.0,
        "per_class": True,
        "tasks": tasks,
        "excit_buffer": True,
        "global_pooling": False,
        "n_modes": 1,
        "lamda_pl": 1.0,
        "dg_type": "class",
        "image_size": image_size,
        "kwargs": {},
        "image_channels": 1,
        "scenario": "class",
        "prior": "GMM",
        "fc_bn": False,
        "conv_bn": True,
        "convE": None,
        "fc_layers": 3,
        "num_blocks": 2,
        "conv_nl": "relu",
        "no_fnl": True,
        "recon_loss": "BCE",
        "fc_units": 400,
        "start_channels": 64,
    }
    vae = AutoEncoder(
        image_size=args["image_size"],
        image_channels=args["image_channels"],
        classes=args["classes"],
        conv_type=args["conv_type"],
        depth=args["depth"],
        start_channels=args["start_channels"],
        reducing_layers=args["reducing_layers"],
        conv_bn=args["conv_bn"],
        conv_nl=args["conv_nl"],
        num_blocks=args["num_blocks"],
        global_pooling=args["global_pooling"],
        no_fnl=args["no_fnl"],
        convE=args["convE"],
        conv_gated=args["conv_gated"],
        fc_layers=args["fc_layers"],
        fc_units=args["fc_units"],
        h_dim=args["h_dim"],
        fc_drop=args["fc_drop"],
        fc_bn=args["fc_bn"],
        fc_nl=args["fc_nl"],
        excit_buffer=args["excit_buffer"],
        fc_gated=args["fc_gated"],
        prior=args["prior"],
        z_dim=args["z_dim"],
        per_class=args["per_class"],
        n_modes=args["n_modes"],
        recon_loss=args["recon_loss"],
        network_output=args["network_output"],
        deconv_type=args["deconv_type"],
        hidden=args["hidden"],
        dg_gates=args["dg_gates"],
        dg_type=args["dg_type"],
        dg_prop=args["dg_prop"],
        tasks=args["tasks"],
        scenario=args["scenario"],
        device=args["device"],
        classifier=args["classifier"],
        classify_opt=args["classify_opt"],
        lamda_pl=args["lamda_pl"],
        lamda_rcl=args["lamda_rcl"],
        lamda_vl=args["lamda_vl"],
    )
    return vae

